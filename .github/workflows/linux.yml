name: Linux tests

permissions:
  contents: read

on: [workflow_call, workflow_dispatch]

jobs:

  linux:
    strategy:
      fail-fast: false
      matrix:
        # total of 38 test runs here.
        runner: [ubuntu-latest] # TODO add arm64
        # Test all combinations of the following options.
        # Generates 16 base test runs (4 on arm, 4 on x86_64).
        compiler: [gcc, clang]
        shared: [ON, OFF]
        openssl: [ON, OFF]
        # Default values to be overridden selectively
        sha3-openssl: [OFF]
        dlopen-openssl: [OFF]
        dist-build: [ON]
        opt-target: [auto]
        stfl: [OFF]
        stfl-keygen: [OFF]
        libjade: [OFF]
        build-options: ['']
        include:
          # Test the OpenSSL SHA3 implementation.
          # It suffices to build only standards-track algs, as these rely heavily on SHA3.
          # Generates 4 additional test runs (2 on arm, 2 on x86_64).
          - shared: ON
            openssl: ON
            sha3-openssl: ON
            build-options: -DOQS_ALGS_ENABLED=STD
          # Test dynamic loading of libcrypto.
          # Since we're primarily testing build-time behaviour, only build the on-ramp candidates.
          # Generates 4 additional test runs (2 on arm, 2 on x86_64).
          - shared: ON
            openssl: ON
            dlopen-ssl: OFF
            build-options: -DOQS_ALGS_ENABLED=NIST_SIG_ONRAMP
          # Test the "generic" code without DIST_BUILD.
          # Do it without OpenSSL so that the generic common code gets tested too.
          # Stateful sigs code is all generic, so additionally test it out here (without keygen).
          # Generates 4 additional test runs (2 on arm, 2 on x86_64).
          - shared: OFF
            openssl: OFF
            dist-build: OFF
            opt-target: generic
            stfl: ON
            stfl-keygen: OFF
          # Test the code without runtime feature detection.
          # Do it without OpenSSL for the same reasons as above.
          # Shared vs static doesn't really matter here, so just pick the opposite of the
          # "generic" run to have more coverage.
          # Test stateful sigs keygen here. We could also do it in the "generic" run, but the
          # non-stateful tests will complete faster in this run, so total runtime will be lower
          # if it's tested here.
          # Generates 4 additional test runs (2 on arm, 2 on x86_64).
          - shared: ON
            openssl: OFF
            dist-build: OFF
            opt-target: auto
            stfl: ON
            stfl-keygen: ON
          # Test the libjade implementation.
          # libjade is not supported on arm.
          # Static/shared/OpenSSL shouldn't matter here.
          # Only build the algorithms supported by libjade.
          # Generates 2 additional test runs (x86_64 only).
          - runner: ubuntu-latest
            shared: OFF
            openssl: ON
            libjade: ON
            build-options: -DOQS_MINIMAL_BUILD="${{ vars.LIBJADE_ALG_LIST }}"
          # Test the "generic" libjade implementation.
          # Generates 2 additional test runs (x86_64 only).
          - runner: ubuntu-latest
            shared: ON
            openssl: OFF
            dist-build: OFF
            opt-target: generic
            libjade: ON
            build-options: -DOQS_MINIMAL_BUILD="${{ vars.LIBJADE_ALG_LIST }}"
          # Test the libjade implementation without runtime feature detection.
          # Generates 2 additional test runs (x86_64 only).
          - runner: ubuntu-latest
            shared: OFF
            openssl: OFF
            dist-build: OFF
            opt-target: auto
            libjade: ON
            build-options: -DOQS_MINIMAL_BUILD="${{ vars.LIBJADE_ALG_LIST }}"

    runs-on: ${{ matrix.runner }}
    container:
      image: openquantumsafe/ci-ubuntu-latest:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Configure
        run: |
          mkdir build && cd build && \
          cmake -GNinja -DOQS_STRICT_WARNINGS=ON \
            -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
            -DBUILD_SHARED_LIBS=${{ matrix.shared }} \
            -DOQS_USE_OPENSSL=${{ matrix.openssl }} \
            -DOQS_USE_SHA3_OPENSSL=${{ matrix.sha3-openssl }} \
            -DOQS_DLOPEN_OPENSSL=${{ matrix.dlopen-openssl }} \
            -DOQS_DIST_BUILD=${{ matrix.dist-build }} \
            -DOQS_OPT_TARGET=${{ matrix.opt-target }} \
            -DOQS_OPT_TARGET=${{ matrix.opt-target }} \
            -DOQS_ENABLE_SIG_STFL_LMS=${{ matrix.stfl }} \
            -DOQS_ENABLE_SIG_STFL_XMSS=${{ matrix.stfl }} \
            -DOQS_HAZARDOUS_EXPERIMENTAL_ENABLE_SIG_STFL_KEY_SIG_GEN=${{ matrix.stfl-keygen }} \
            -DOQS_LIBJADE_BUILD=${{ matrix.libjade }} \
            ${{ matrix.build-options }} .. && \
          cmake -LA -N ..
      - name: Build
        run: ninja
        working-directory: build
      - name: Run tests
        timeout-minutes: 60
        run: |
          mkdir -p tmp && \
          python3 -m pytest --verbose \
            --ignore=tests/test_code_conventions.py \
            --ignore=tests/test_constant_time.py \
            --ignore=tests/test_kat_all.py \
            --numprocesses=auto
# TODO: figure out where to put these
#      - name: Package .deb
#        if: matrix.name == 'jammy-std-openssl3'
#        run: cpack
#        working-directory: build
#      - name: Retain .deb file
#        if: matrix.name == 'jammy-std-openssl3'
#        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # pin@v3
#        with:
#          name: liboqs-openssl3-shared-x64
#          path: build/*.deb
#      - name: Check STD algorithm and alias
#        if: matrix.name == 'jammy-std-openssl3'
#        run: 'tests/dump_alg_info | grep -zoP "ML-DSA-44:\n    isnull: false" && tests/dump_alg_info | grep -zoP "ML-DSA-44-ipd:\n    isnull: true" && tests/dump_alg_info | grep -zoP "ML-KEM-512:\n    isnull: false"'
#        working-directory: build

  linux_arm_emulated:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: armhf
            ARCH: armhf
            CMAKE_ARGS: -DOQS_ENABLE_SIG_SPHINCS=OFF -DOQS_USE_OPENSSL=OFF -DOQS_DIST_BUILD=OFF -DOQS_OPT_TARGET=generic -DOQS_HAZARDOUS_EXPERIMENTAL_ENABLE_SIG_STFL_KEY_SIG_GEN=ON -DOQS_ENABLE_SIG_STFL_XMSS=ON -DOQS_ENABLE_SIG_STFL_LMS=ON
            PYTEST_ARGS: --ignore=tests/test_alg_info.py --ignore=tests/test_kat_all.py
          - name: armhf-no-stfl-key-sig-gen
            ARCH: armhf
            CMAKE_ARGS: -DOQS_ENABLE_SIG_SPHINCS=OFF -DOQS_USE_OPENSSL=OFF -DOQS_DIST_BUILD=OFF -DOQS_OPT_TARGET=generic -DOQS_HAZARDOUS_EXPERIMENTAL_ENABLE_SIG_STFL_KEY_SIG_GEN=OFF -DOQS_ENABLE_SIG_STFL_XMSS=ON -DOQS_ENABLE_SIG_STFL_LMS=ON
            PYTEST_ARGS: --ignore=tests/test_alg_info.py --ignore=tests/test_kat_all.py
          # no longer supporting armel
          # - name: armel
          #   ARCH: armel
          #   CMAKE_ARGS: -DOQS_ENABLE_SIG_SPHINCS=OFF -DOQS_USE_OPENSSL=OFF -DOQS_DIST_BUILD=OFF -DOQS_OPT_TARGET=generic
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Install the emulation handlers
        run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - name: Build in an x86_64 container
        run: |
          docker run --rm \
                     -v `pwd`:`pwd` \
                     -w `pwd` \
                     openquantumsafe/ci-debian-buster-amd64:latest /bin/bash \
                     -c "mkdir build && \
                         (cd build && \
                          cmake .. -GNinja ${{ matrix.CMAKE_ARGS }} \
                                   -DCMAKE_TOOLCHAIN_FILE=../.CMake/toolchain_${{ matrix.ARCH }}.cmake && \
                          cmake -LA -N .. && \
                          ninja)"
      - name: Run the tests in an ${{ matrix.ARCH }} container
        timeout-minutes: 60
        run: |
          docker run --rm -e SKIP_TESTS=style,mem_kem,mem_sig \
                          -v `pwd`:`pwd` \
                          -w `pwd` \
                          openquantumsafe/ci-debian-buster-${{ matrix.ARCH }}:latest /bin/bash \
                          -c "mkdir -p tmp && \
                              python3 -m pytest --verbose \
                                                --numprocesses=auto \
                                                --ignore=tests/test_code_conventions.py ${{ matrix.PYTEST_ARGS }}"

  linux_cross_compile:
    runs-on: ubuntu-latest
    container: openquantumsafe/ci-ubuntu-focal-x86_64:latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: windows-binaries
            CMAKE_ARGS: -DCMAKE_TOOLCHAIN_FILE=../.CMake/toolchain_windows-amd64.cmake
          - name: windows-dll
            CMAKE_ARGS: -DCMAKE_TOOLCHAIN_FILE=../.CMake/toolchain_windows-amd64.cmake -DBUILD_SHARED_LIBS=ON
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Configure
        run: mkdir build && cd build && cmake -GNinja ${{ matrix.CMAKE_ARGS }} .. && cmake -LA -N ..
      - name: Build
        run: ninja
        working-directory: build

  linux_openssl330-dev:
    runs-on: ubuntu-latest
    container:
      image: openquantumsafe/ci-ubuntu-jammy:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Retrieve OpenSSL330 from cache
        id: cache-openssl330
        uses: actions/cache@e12d46a63a90f2fae62d114769bbf2a179198b5c # pin@v3
        with:
          path: .localopenssl330
          key: ${{ runner.os }}-openssl330
      - name: Checkout the OpenSSL v3.3.0 commit
        if: steps.cache-openssl330.outputs.cache-hit != 'true'
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
        with:
          repository: 'openssl/openssl'
          ref: 'openssl-3.3.0-beta1'
          path: openssl
      - name: Prepare the OpenSSL build directory
        if: steps.cache-openssl330.outputs.cache-hit != 'true'
        run: mkdir .localopenssl330
        working-directory: openssl
      - name: Build openssl3 if not cached
        if: steps.cache-openssl330.outputs.cache-hit != 'true'
        run: |
          ./config --prefix=`pwd`/../.localopenssl330 && make -j 4 && make install_sw install_ssldirs
        working-directory: openssl
      - name: Save OpenSSL
        id: cache-openssl-save
        if: steps.cache-openssl330.outputs.cache-hit != 'true'
        uses: actions/cache/save@e12d46a63a90f2fae62d114769bbf2a179198b5c # pin@v3
        with:
          path: |
            .localopenssl330
          key: ${{ runner.os }}-openssl330
      - name: Configure
        run: mkdir build && cd build && cmake -GNinja -DOQS_STRICT_WARNINGS=ON -DOPENSSL_ROOT_DIR=../.localopenssl330 -DOQS_USE_OPENSSL=ON -DBUILD_SHARED_LIBS=ON -DOQS_USE_AES_OPENSSL=ON -DOQS_USE_SHA2_OPENSSL=ON -DOQS_USE_SHA3_OPENSSL=ON .. && cmake -LA -N ..
      - name: Build
        run: ninja
        working-directory: build
      - name: Run tests
        timeout-minutes: 60
        run: mkdir -p tmp && python3 -m pytest --verbose --ignore=tests/test_code_conventions.py --ignore=tests/test_leaks.py --ignore=tests/test_kat_all.py

  scan_build:
    runs-on: ubuntu-latest
    container: openquantumsafe/ci-ubuntu-focal-x86_64:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure
        run: mkdir build && cd build && scan-build-15 cmake -GNinja ..
      - name: Build
        run: scan-build-15 --status-bugs ninja
        working-directory: build
