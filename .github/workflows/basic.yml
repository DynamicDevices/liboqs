name: Basic checks

permissions:
  contents: read

on: [ push, pull_request, workflow_dispatch ]

jobs:
  stylecheck:
    name: Check code formatting
    container: openquantumsafe/ci-ubuntu-focal-x86_64:latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Ensure code conventions are upheld
        run: python3 -m pytest --verbose tests/test_code_conventions.py
      - name: Check that doxygen can parse the documentation
        run: mkdir build && ./scripts/run_doxygen.sh $(which doxygen) ./docs/.Doxyfile ./build
      - name: Validate CBOM
        run: scripts/validate_cbom.sh

  upstreamcheck:
    name: Check upstream code is properly integrated
    strategy:
      fail-fast: false
      matrix:
        copy-mode:
          - copy
          - libjade
    container: openquantumsafe/ci-ubuntu-focal-x86_64:latest
    runs-on: ubuntu-latest
    steps:
      - name: Setup nix
        uses: cachix/install-nix-action@v26
      - name: Setup jasmin-compiler
        run: |
          nix-channel --add https://nixos.org/channels/nixos-23.11 nixpkgs && \
          nix-channel --update && nix-env -iA nixpkgs.jasmin-compiler
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Verify copy_from_upstream state after "${{ matrix.copy-mode}}"
        run: |
          git config --global user.name "ciuser" && \
          git config --global user.email "ci@openquantumsafe.org" && \
          export LIBOQS_DIR=`pwd` && \
          git config --global --add safe.directory $LIBOQS_DIR && \
          cd scripts/copy_from_upstream && \
          ! pip3 install --require-hashes -r requirements.txt 2>&1 | grep -i ERROR && \
          python3 copy_from_upstream.py ${{ matrix.copy-mode }} && \
          ! git status | grep modified

  buildcheck_linux:
    name: Basic Linux build # Check that code passes a basic build before starting heavier tests
    needs: [ stylecheck, upstreamcheck ]
    strategy:
      matrix:
        runner:
          - ubuntu-latest
            #- oqs-arm64
        container:
          - openquantumsafe/ci-ubuntu-focal-x86_64:latest
            #- openquantumsafe/ci-ubuntu-jammy:latest
            #- openquantumsafe/ci-ubuntu-noble:latest
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}
    env:
      KEM_NAME: kyber_768
      SIG_NAME: dilithium_3
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Configure
        run: |
          mkdir build && \
          cd build && \
          cmake .. --warn-uninitialized \
                   -GNinja \
                   -DOQS_MINIMAL_BUILD="KEM_$KEM_NAME;SIG_$SIG_NAME" \
                   > config.log 2>&1 && \
          cat config.log && \
          cmake -LA -N .. && \
          ! (grep "uninitialized variable" config.log)
      - name: Build code
        run: ninja
        working-directory: build
      - name: Build documentation
        run: ninja gen_docs
        working-directory: build

  buildcheck_macos:
    name: Basic macOS build
    needs: [ stylecheck, upstreamcheck ]
    strategy:
      matrix:
        runner:
          - macos-12
          - macos-13
          - macos-14
    runs-on: ${{ matrix.runner }}
    env:
      KEM_NAME: kyber_768
      SIG_NAME: dilithium_3
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Configure
        run: |
          mkdir build && \
          cd build && \
          cmake .. --warn-uninitialized \
                   -GNinja \
                   -DOQS_MINIMAL_BUILD="KEM_$KEM_NAME;SIG_$SIG_NAME" \
                   > config.log 2>&1 && \
          cat config.log && \
          cmake -LA -N .. && \
          ! (grep "uninitialized variable" config.log)
      - name: Build code
        run: ninja
        working-directory: build
      - name: Build documentation
        run: ninja gen_docs
        working-directory: build
